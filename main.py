import logging
from config import config_bot
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
import os
import datetime

from keyborads import *
from handlers.task_4_handler import *

logging.basicConfig(level=logging.INFO)

bot = Bot(token=config_bot.bot_token.get_secret_value())
dp = Dispatcher(bot)

users_location = {}


# ----------------------------------------------------------------------------------

@dp.message_handler(commands='start')
async def start_message(message: types.Message):
    users_location[message.from_user.id] = 'main_menu'
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠!",
                         reply_markup=start_keyboard())


@dp.message_handler(commands='admin')
async def start_message(message: types.Message):
    users_location[message.from_user.id] = 'admin_menu'
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –º–∞—Å—Ç–µ—Ä!", reply_markup=start_admin_keybord())


# --------------------------------------------------------------------------------
@dp.message_handler(Text(equals='–£–¥–∞—Ä–µ–Ω–∏—è'))
async def accent(message: types.Message):
    users_location[message.from_user.id] = 'accent'
    await message.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–∞ —É–¥–∞—Ä–µ–Ω–∏–µ",
                         reply_markup=accent_keyboard(message.from_user.id))


@dp.message_handler(lambda message: message.text in ['–í–µ—Ä–Ω—É—Ç—å—Å—è üëà', '–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
async def return_to_main_menu(message: types.Message):
    users_location[message.from_user.id] = 'main_menu'
    await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
                         reply_markup=start_keyboard())


# --------------------------------------------------------------------------------

@dp.message_handler(lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ' and \
                                    users_location[message.from_user.id] == 'admin_menu')
async def edit_sutents_task(message: types.Message):
    await message.answer("–í—ã –≤ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π –∑–∞–¥–∞–Ω–∏–π.",
                         reply_markup=task_admin_keyboard())


@dp.callback_query_handler(text_startswith='edit_task')
async def edit_task_4(callback: types.CallbackQuery):
    users_location[callback.from_user.id] = 'admin_edit_panel'
    num_of_task = callback.data.split('_')[-1]
    path = f'handlers/materials_for_studying/task_{num_of_task}/task_{num_of_task}.xlsx'
    await callback.message.answer("–§–∞–π–ª —Å –∑–∞–¥–∞–Ω–∏—è–º–∏:", reply_markup=back_to_admin_menu())
    if os.path.exists(path):
        with open(path, 'rb') as file:
            await callback.message.answer_document(file)
        await callback.message.answer("–ü–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—Ç–µ —Ñ–∞–π–ª —Å—é–¥–∞ üëá")
    else:
        await callback.message.answer("*—Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç*")
        await callback.message.answer("–ù–æ–≤—ã–π —Ñ–∞–π–ª –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—é–¥–∞ üëá")
    await callback.answer()


# –î–õ–Ø –ü–†–û–õ–ò–°–¢–´–í–ê–ù–ò–Ø –ó–ê–î–ê–ù–ò–ô –£ –ê–î–ú–ò–ù–ê
@dp.callback_query_handler(text_startswith='kb_edit')
async def change_edit_line(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=task_admin_keyboard(callback.data))


@dp.message_handler(lambda message: message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞ üëà' and \
                                    users_location[message.from_user.id] in ['admin_menu', 'admin_edit_panel'])
async def return_to_admin_menu(message: types.Message):
    users_location[message.from_user.id] = 'admin_menu'
    await message.answer(f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                         reply_markup=start_admin_keybord())


@dp.message_handler(content_types=types.ContentType.DOCUMENT)
async def fileHandle(message: types.Message):
    name, type_file = message.document.file_name.split('.')
    if users_location[message.from_user.id] == 'admin_edit_panel':
        await message.answer(f'–§–∞–π–ª {name} –æ—Ç–ø—Ä–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É, –∂–¥–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.')
        path = os.path.abspath('requests_to_edit_file')
        time = f'{datetime.datetime.now()}'
        idx = time.rfind('.')
        time = time[:idx].replace(':', '-')
        destination = path + rf"\{name} ({time})_({message.from_user.id}).{type_file}"
        print(destination)
        await message.document.download(destination_file=destination)
    else:
        await message.answer(f'–ó–¥–µ—Å—å –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–≤–∏—Ç—å —Ñ–∞–π–ª.')


# --------------------------------------------------------------------------------
@dp.message_handler(lambda message: users_location[message.from_user.id] == 'accent')
async def get_user_accent(message: types.Message):
    correct_word = users_current_accent_words[message.from_user.id]['correct_word']
    incorrect_word = users_current_accent_words[message.from_user.id]['incorrect_word']
    current_num = users_current_accent_words[message.from_user.id]['current_num']
    if message.text == correct_word:
        give_new_words_for_user(message.from_user.id, current_num)
        await message.answer("–í–µ—Ä–Ω–æ!  ‚úÖ",
                             reply_markup=accent_keyboard(message.from_user.id))
    elif message.text == incorrect_word:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–æ =(   ‚ùå",
                             reply_markup=start_keyboard())


# --------------------------------------------------------------------------------
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
